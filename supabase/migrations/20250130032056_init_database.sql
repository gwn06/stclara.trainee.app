create table users (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  secret_message text,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table friend_requests (
  id bigint generated by default as identity primary key,
  requester_id uuid references auth.users on delete cascade not null ,
  recipient_id uuid references auth.users on delete cascade not null,
  status text check (status in ('pending', 'accepted', 'canceled')) not null default 'pending',
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (requester_id, recipient_id)
);


create table friendships (
  user_id uuid references auth.users on delete cascade not null,
  friend_id uuid references auth.users on delete cascade not null,
  primary key (user_id, friend_id)
);

alter table users enable row level security;
create policy "Individuals can create secret message." on users for
    insert with check (auth.uid() = user_id);
create policy "Individuals can view their own secret message. " on users for
    select using (auth.uid() = user_id);
create policy "Individuals can update their own secret message." on users for
    update using (auth.uid() = user_id);

-- Allow friends to view each other's secret messages
create policy "Friends can view each others secret messages." on users for
    select using (exists(select 1 from friendships where
        (user_id = auth.uid() and friend_id = users.user_id) or
        (friend_id = auth.uid() and user_id = users.user_id)));

create policy "Individuals can view their own friend requests." on friend_requests for
    select using (auth.uid() = requester_id or auth.uid() = recipient_id);
